package com.ubiqube.mano.pdns.api;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import com.ubiqube.mano.pdns.invoker.ApiClient;
import com.ubiqube.mano.pdns.model.TSIGKey;

import jakarta.annotation.Nonnull;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-23T10:34:53.990305454+02:00[Europe/Paris]", comments = "Generator version: 7.13.0")
public class TsigkeyApi {
	private ApiClient apiClient;

	public TsigkeyApi() {
		this(new ApiClient());
	}

	@Autowired
	public TsigkeyApi(final ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(final ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Add a TSIG key This methods add a new TSIGKey. The actual key can be
	 * generated by the server or be provided by the client
	 * <p>
	 * <b>201</b> - Created
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @param tsigkey  The TSIGKey to add
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	private ResponseSpec createTSIGKeyRequestCreation(@Nonnull final String serverId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		Object postBody = tsigkey;
		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new WebClientResponseException("Missing the required parameter 'serverId' when calling createTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// verify the required parameter 'tsigkey' is set
		if (tsigkey == null) {
			throw new WebClientResponseException("Missing the required parameter 'tsigkey' when calling createTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// create path and map variables
		final Map<String, Object> pathParams = new HashMap<>();

		pathParams.put("server_id", serverId);

		final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		final HttpHeaders headerParams = new HttpHeaders();
		final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<>();
		final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		final String[] localVarContentTypes = {
				"application/json"
		};
		final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

		String[] localVarAuthNames = { "APIKeyHeader" };

		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return apiClient.invokeAPI("/servers/{server_id}/tsigkeys", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
	}

	/**
	 * Add a TSIG key This methods add a new TSIGKey. The actual key can be
	 * generated by the server or be provided by the client
	 * <p>
	 * <b>201</b> - Created
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @param tsigkey  The TSIGKey to add
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<TSIGKey> createTSIGKey(@Nonnull final String serverId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return createTSIGKeyRequestCreation(serverId, tsigkey).bodyToMono(localVarReturnType);
	}

	/**
	 * Add a TSIG key This methods add a new TSIGKey. The actual key can be
	 * generated by the server or be provided by the client
	 * <p>
	 * <b>201</b> - Created
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @param tsigkey  The TSIGKey to add
	 * @return ResponseEntity&lt;TSIGKey&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<ResponseEntity<TSIGKey>> createTSIGKeyWithHttpInfo(@Nonnull final String serverId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return createTSIGKeyRequestCreation(serverId, tsigkey).toEntity(localVarReturnType);
	}

	/**
	 * Add a TSIG key This methods add a new TSIGKey. The actual key can be
	 * generated by the server or be provided by the client
	 * <p>
	 * <b>201</b> - Created
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @param tsigkey  The TSIGKey to add
	 * @return ResponseSpec
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public ResponseSpec createTSIGKeyWithResponseSpec(@Nonnull final String serverId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		return createTSIGKeyRequestCreation(serverId, tsigkey);
	}

	/**
	 * Delete the TSIGKey with tsigkey_id
	 * 
	 * <p>
	 * <b>204</b> - OK, key was deleted
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	private ResponseSpec deleteTSIGKeyRequestCreation(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		Object postBody = null;
		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new WebClientResponseException("Missing the required parameter 'serverId' when calling deleteTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// verify the required parameter 'tsigkeyId' is set
		if (tsigkeyId == null) {
			throw new WebClientResponseException("Missing the required parameter 'tsigkeyId' when calling deleteTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// create path and map variables
		final Map<String, Object> pathParams = new HashMap<>();

		pathParams.put("server_id", serverId);
		pathParams.put("tsigkey_id", tsigkeyId);

		final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		final HttpHeaders headerParams = new HttpHeaders();
		final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<>();
		final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		final String[] localVarContentTypes = {};
		final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

		String[] localVarAuthNames = { "APIKeyHeader" };

		ParameterizedTypeReference<Void> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return apiClient.invokeAPI("/servers/{server_id}/tsigkeys/{tsigkey_id}", HttpMethod.DELETE, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
	}

	/**
	 * Delete the TSIGKey with tsigkey_id
	 * 
	 * <p>
	 * <b>204</b> - OK, key was deleted
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<Void> deleteTSIGKey(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		ParameterizedTypeReference<Void> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return deleteTSIGKeyRequestCreation(serverId, tsigkeyId).bodyToMono(localVarReturnType);
	}

	/**
	 * Delete the TSIGKey with tsigkey_id
	 * 
	 * <p>
	 * <b>204</b> - OK, key was deleted
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<ResponseEntity<Void>> deleteTSIGKeyWithHttpInfo(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		ParameterizedTypeReference<Void> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return deleteTSIGKeyRequestCreation(serverId, tsigkeyId).toEntity(localVarReturnType);
	}

	/**
	 * Delete the TSIGKey with tsigkey_id
	 * 
	 * <p>
	 * <b>204</b> - OK, key was deleted
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @return ResponseSpec
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public ResponseSpec deleteTSIGKeyWithResponseSpec(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		return deleteTSIGKeyRequestCreation(serverId, tsigkeyId);
	}

	/**
	 * Get a specific TSIGKeys on the server, including the actual key
	 * 
	 * <p>
	 * <b>200</b> - OK.
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	private ResponseSpec getTSIGKeyRequestCreation(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		Object postBody = null;
		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new WebClientResponseException("Missing the required parameter 'serverId' when calling getTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// verify the required parameter 'tsigkeyId' is set
		if (tsigkeyId == null) {
			throw new WebClientResponseException("Missing the required parameter 'tsigkeyId' when calling getTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// create path and map variables
		final Map<String, Object> pathParams = new HashMap<>();

		pathParams.put("server_id", serverId);
		pathParams.put("tsigkey_id", tsigkeyId);

		final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		final HttpHeaders headerParams = new HttpHeaders();
		final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<>();
		final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		final String[] localVarContentTypes = {};
		final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

		String[] localVarAuthNames = { "APIKeyHeader" };

		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return apiClient.invokeAPI("/servers/{server_id}/tsigkeys/{tsigkey_id}", HttpMethod.GET, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
	}

	/**
	 * Get a specific TSIGKeys on the server, including the actual key
	 * 
	 * <p>
	 * <b>200</b> - OK.
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<TSIGKey> getTSIGKey(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return getTSIGKeyRequestCreation(serverId, tsigkeyId).bodyToMono(localVarReturnType);
	}

	/**
	 * Get a specific TSIGKeys on the server, including the actual key
	 * 
	 * <p>
	 * <b>200</b> - OK.
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @return ResponseEntity&lt;TSIGKey&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<ResponseEntity<TSIGKey>> getTSIGKeyWithHttpInfo(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return getTSIGKeyRequestCreation(serverId, tsigkeyId).toEntity(localVarReturnType);
	}

	/**
	 * Get a specific TSIGKeys on the server, including the actual key
	 * 
	 * <p>
	 * <b>200</b> - OK.
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @return ResponseSpec
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public ResponseSpec getTSIGKeyWithResponseSpec(@Nonnull final String serverId, @Nonnull final String tsigkeyId) throws WebClientResponseException {
		return getTSIGKeyRequestCreation(serverId, tsigkeyId);
	}

	/**
	 * Get all TSIGKeys on the server, except the actual key
	 * 
	 * <p>
	 * <b>200</b> - List of TSIGKey objects
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @return List&lt;TSIGKey&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	private ResponseSpec listTSIGKeysRequestCreation(@Nonnull final String serverId) throws WebClientResponseException {
		Object postBody = null;
		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new WebClientResponseException("Missing the required parameter 'serverId' when calling listTSIGKeys", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// create path and map variables
		final Map<String, Object> pathParams = new HashMap<>();

		pathParams.put("server_id", serverId);

		final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		final HttpHeaders headerParams = new HttpHeaders();
		final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<>();
		final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		final String[] localVarContentTypes = {};
		final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

		String[] localVarAuthNames = { "APIKeyHeader" };

		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return apiClient.invokeAPI("/servers/{server_id}/tsigkeys", HttpMethod.GET, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
	}

	/**
	 * Get all TSIGKeys on the server, except the actual key
	 * 
	 * <p>
	 * <b>200</b> - List of TSIGKey objects
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @return List&lt;TSIGKey&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Flux<TSIGKey> listTSIGKeys(@Nonnull final String serverId) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return listTSIGKeysRequestCreation(serverId).bodyToFlux(localVarReturnType);
	}

	/**
	 * Get all TSIGKeys on the server, except the actual key
	 * 
	 * <p>
	 * <b>200</b> - List of TSIGKey objects
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @return ResponseEntity&lt;List&lt;TSIGKey&gt;&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<ResponseEntity<List<TSIGKey>>> listTSIGKeysWithHttpInfo(@Nonnull final String serverId) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return listTSIGKeysRequestCreation(serverId).toEntityList(localVarReturnType);
	}

	/**
	 * Get all TSIGKeys on the server, except the actual key
	 * 
	 * <p>
	 * <b>200</b> - List of TSIGKey objects
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId The id of the server
	 * @return ResponseSpec
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public ResponseSpec listTSIGKeysWithResponseSpec(@Nonnull final String serverId) throws WebClientResponseException {
		return listTSIGKeysRequestCreation(serverId);
	}

	/**
	 * 
	 * The TSIGKey at tsigkey_id can be changed in multiple ways: * Changing the
	 * Name, this will remove the key with tsigkey_id after adding. * Changing the
	 * Algorithm * Changing the Key Only the relevant fields have to be provided in
	 * the request body.
	 * <p>
	 * <b>200</b> - OK. TSIGKey is changed.
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @param tsigkey   A (possibly stripped down) TSIGKey object with the new
	 *                  values
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	private ResponseSpec putTSIGKeyRequestCreation(@Nonnull final String serverId, @Nonnull final String tsigkeyId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		Object postBody = tsigkey;
		// verify the required parameter 'serverId' is set
		if (serverId == null) {
			throw new WebClientResponseException("Missing the required parameter 'serverId' when calling putTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// verify the required parameter 'tsigkeyId' is set
		if (tsigkeyId == null) {
			throw new WebClientResponseException("Missing the required parameter 'tsigkeyId' when calling putTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// verify the required parameter 'tsigkey' is set
		if (tsigkey == null) {
			throw new WebClientResponseException("Missing the required parameter 'tsigkey' when calling putTSIGKey", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
		}
		// create path and map variables
		final Map<String, Object> pathParams = new HashMap<>();

		pathParams.put("server_id", serverId);
		pathParams.put("tsigkey_id", tsigkeyId);

		final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		final HttpHeaders headerParams = new HttpHeaders();
		final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<>();
		final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		final String[] localVarContentTypes = {
				"application/json"
		};
		final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

		String[] localVarAuthNames = { "APIKeyHeader" };

		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return apiClient.invokeAPI("/servers/{server_id}/tsigkeys/{tsigkey_id}", HttpMethod.PUT, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
	}

	/**
	 * 
	 * The TSIGKey at tsigkey_id can be changed in multiple ways: * Changing the
	 * Name, this will remove the key with tsigkey_id after adding. * Changing the
	 * Algorithm * Changing the Key Only the relevant fields have to be provided in
	 * the request body.
	 * <p>
	 * <b>200</b> - OK. TSIGKey is changed.
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @param tsigkey   A (possibly stripped down) TSIGKey object with the new
	 *                  values
	 * @return TSIGKey
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<TSIGKey> putTSIGKey(@Nonnull final String serverId, @Nonnull final String tsigkeyId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return putTSIGKeyRequestCreation(serverId, tsigkeyId, tsigkey).bodyToMono(localVarReturnType);
	}

	/**
	 * 
	 * The TSIGKey at tsigkey_id can be changed in multiple ways: * Changing the
	 * Name, this will remove the key with tsigkey_id after adding. * Changing the
	 * Algorithm * Changing the Key Only the relevant fields have to be provided in
	 * the request body.
	 * <p>
	 * <b>200</b> - OK. TSIGKey is changed.
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @param tsigkey   A (possibly stripped down) TSIGKey object with the new
	 *                  values
	 * @return ResponseEntity&lt;TSIGKey&gt;
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public Mono<ResponseEntity<TSIGKey>> putTSIGKeyWithHttpInfo(@Nonnull final String serverId, @Nonnull final String tsigkeyId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		ParameterizedTypeReference<TSIGKey> localVarReturnType = new ParameterizedTypeReference<>() {
		};
		return putTSIGKeyRequestCreation(serverId, tsigkeyId, tsigkey).toEntity(localVarReturnType);
	}

	/**
	 * 
	 * The TSIGKey at tsigkey_id can be changed in multiple ways: * Changing the
	 * Name, this will remove the key with tsigkey_id after adding. * Changing the
	 * Algorithm * Changing the Key Only the relevant fields have to be provided in
	 * the request body.
	 * <p>
	 * <b>200</b> - OK. TSIGKey is changed.
	 * <p>
	 * <b>409</b> - An item with this name already exists
	 * <p>
	 * <b>400</b> - The supplied request was not valid
	 * <p>
	 * <b>404</b> - Requested item was not found
	 * <p>
	 * <b>422</b> - The input to the operation was not valid
	 * <p>
	 * <b>500</b> - Internal server error
	 *
	 * @param serverId  The id of the server to retrieve the key from
	 * @param tsigkeyId The id of the TSIGkey. Should match the \&quot;id\&quot;
	 *                  field in the TSIGKey object
	 * @param tsigkey   A (possibly stripped down) TSIGKey object with the new
	 *                  values
	 * @return ResponseSpec
	 * @throws WebClientResponseException if an error occurs while attempting to
	 *                                    invoke the API
	 */
	public ResponseSpec putTSIGKeyWithResponseSpec(@Nonnull final String serverId, @Nonnull final String tsigkeyId, @Nonnull final TSIGKey tsigkey) throws WebClientResponseException {
		return putTSIGKeyRequestCreation(serverId, tsigkeyId, tsigkey);
	}
}
