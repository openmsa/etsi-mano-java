/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.15
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ubiqube.mano.pdns.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.jspecify.annotations.Nullable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import jakarta.annotation.Nonnull;

/**
 * This represents a Resource Record Set (all records with the same name and
 * type).
 */
@JsonPropertyOrder({
		RRSet.JSON_PROPERTY_NAME,
		RRSet.JSON_PROPERTY_TYPE,
		RRSet.JSON_PROPERTY_TTL,
		RRSet.JSON_PROPERTY_CHANGETYPE,
		RRSet.JSON_PROPERTY_RECORDS,
		RRSet.JSON_PROPERTY_COMMENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-23T10:34:53.990305454+02:00[Europe/Paris]", comments = "Generator version: 7.13.0")
public class RRSet {
	public static final String JSON_PROPERTY_NAME = "name";
	@Nonnull
	private String name;

	public static final String JSON_PROPERTY_TYPE = "type";
	@Nonnull
	private String type;

	public static final String JSON_PROPERTY_TTL = "ttl";
	@Nonnull
	private Integer ttl;

	public static final String JSON_PROPERTY_CHANGETYPE = "changetype";
	@Nonnull
	private String changetype;

	public static final String JSON_PROPERTY_RECORDS = "records";
	@Nonnull
	private List<Record> records = new ArrayList<>();

	public static final String JSON_PROPERTY_COMMENTS = "comments";
	@Nullable
	private List<Comment> comments = new ArrayList<>();

	public RRSet() {
	}

	public RRSet name(@Nonnull final String name) {

		this.name = name;
		return this;
	}

	/**
	 * Name for record set (e.g. “www.powerdns.com.”)
	 *
	 * @return name
	 */
	@Nonnull
	@JsonProperty(JSON_PROPERTY_NAME)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public String getName() {
		return name;
	}

	@JsonProperty(JSON_PROPERTY_NAME)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public void setName(@Nonnull final String name) {
		this.name = name;
	}

	public RRSet type(@Nonnull final String type) {

		this.type = type;
		return this;
	}

	/**
	 * Type of this record (e.g. “A”, “PTR”, “MX”)
	 *
	 * @return type
	 */
	@Nonnull
	@JsonProperty(JSON_PROPERTY_TYPE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public String getType() {
		return type;
	}

	@JsonProperty(JSON_PROPERTY_TYPE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public void setType(@Nonnull final String type) {
		this.type = type;
	}

	public RRSet ttl(@Nonnull final Integer ttl) {

		this.ttl = ttl;
		return this;
	}

	/**
	 * DNS TTL of the records, in seconds. MUST NOT be included when changetype is
	 * set to “DELETE”.
	 *
	 * @return ttl
	 */
	@Nonnull
	@JsonProperty(JSON_PROPERTY_TTL)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public Integer getTtl() {
		return ttl;
	}

	@JsonProperty(JSON_PROPERTY_TTL)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public void setTtl(@Nonnull final Integer ttl) {
		this.ttl = ttl;
	}

	public RRSet changetype(@Nonnull final String changetype) {

		this.changetype = changetype;
		return this;
	}

	/**
	 * MUST be added when updating the RRSet. Must be REPLACE or DELETE. With
	 * DELETE, all existing RRs matching name and type will be deleted, including
	 * all comments. With REPLACE: when records is present, all existing RRs
	 * matching name and type will be deleted, and then new records given in records
	 * will be created. If no records are left, any existing comments will be
	 * deleted as well. When comments is present, all existing comments for the RRs
	 * matching name and type will be deleted, and then new comments given in
	 * comments will be created.
	 *
	 * @return changetype
	 */
	@Nonnull
	@JsonProperty(JSON_PROPERTY_CHANGETYPE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public String getChangetype() {
		return changetype;
	}

	@JsonProperty(JSON_PROPERTY_CHANGETYPE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public void setChangetype(@Nonnull final String changetype) {
		this.changetype = changetype;
	}

	public RRSet records(@Nonnull final List<Record> records) {

		this.records = records;
		return this;
	}

	public RRSet addRecordsItem(final Record recordsItem) {
		if (this.records == null) {
			this.records = new ArrayList<>();
		}
		this.records.add(recordsItem);
		return this;
	}

	/**
	 * All records in this RRSet. When updating Records, this is the list of new
	 * records (replacing the old ones). Must be empty when changetype is set to
	 * DELETE. An empty list results in deletion of all records (and comments).
	 *
	 * @return records
	 */
	@Nonnull
	@JsonProperty(JSON_PROPERTY_RECORDS)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public List<Record> getRecords() {
		return records;
	}

	@JsonProperty(JSON_PROPERTY_RECORDS)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public void setRecords(@Nonnull final List<Record> records) {
		this.records = records;
	}

	public RRSet comments(@Nullable final List<Comment> comments) {

		this.comments = comments;
		return this;
	}

	public RRSet addCommentsItem(final Comment commentsItem) {
		if (this.comments == null) {
			this.comments = new ArrayList<>();
		}
		this.comments.add(commentsItem);
		return this;
	}

	/**
	 * List of Comment. Must be empty when changetype is set to DELETE. An empty
	 * list results in deletion of all comments. modified_at is optional and
	 * defaults to the current server time.
	 *
	 * @return comments
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_COMMENTS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public List<Comment> getComments() {
		return comments;
	}

	@JsonProperty(JSON_PROPERTY_COMMENTS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setComments(@Nullable final List<Comment> comments) {
		this.comments = comments;
	}

	@Override
	public boolean equals(final Object o) {
		if (this == o) {
			return true;
		}
		if ((o == null) || (getClass() != o.getClass())) {
			return false;
		}
		RRSet rrSet = (RRSet) o;
		return Objects.equals(this.name, rrSet.name) &&
				Objects.equals(this.type, rrSet.type) &&
				Objects.equals(this.ttl, rrSet.ttl) &&
				Objects.equals(this.changetype, rrSet.changetype) &&
				Objects.equals(this.records, rrSet.records) &&
				Objects.equals(this.comments, rrSet.comments);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, type, ttl, changetype, records, comments);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class RRSet {\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
		sb.append("    changetype: ").append(toIndentedString(changetype)).append("\n");
		sb.append("    records: ").append(toIndentedString(records)).append("\n");
		sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(final Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
