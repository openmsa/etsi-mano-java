/*
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.15
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ubiqube.mano.pdns.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.jspecify.annotations.Nullable;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Describes a DNSSEC cryptographic key
 */
@JsonPropertyOrder({
		Cryptokey.JSON_PROPERTY_TYPE,
		Cryptokey.JSON_PROPERTY_ID,
		Cryptokey.JSON_PROPERTY_KEYTYPE,
		Cryptokey.JSON_PROPERTY_ACTIVE,
		Cryptokey.JSON_PROPERTY_PUBLISHED,
		Cryptokey.JSON_PROPERTY_DNSKEY,
		Cryptokey.JSON_PROPERTY_DS,
		Cryptokey.JSON_PROPERTY_CDS,
		Cryptokey.JSON_PROPERTY_PRIVATEKEY,
		Cryptokey.JSON_PROPERTY_ALGORITHM,
		Cryptokey.JSON_PROPERTY_BITS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-23T10:34:53.990305454+02:00[Europe/Paris]", comments = "Generator version: 7.13.0")
public class Cryptokey {
	public static final String JSON_PROPERTY_TYPE = "type";
	@Nullable
	private String type;

	public static final String JSON_PROPERTY_ID = "id";
	@Nullable
	private Integer id;

	/**
	 * Gets or Sets keytype
	 */
	public enum KeytypeEnum {
		KSK(String.valueOf("ksk")),

		ZSK(String.valueOf("zsk")),

		CSK(String.valueOf("csk"));

		private final String value;

		KeytypeEnum(final String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static KeytypeEnum fromValue(final String value) {
			for (KeytypeEnum b : KeytypeEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}
	}

	public static final String JSON_PROPERTY_KEYTYPE = "keytype";
	@Nullable
	private KeytypeEnum keytype;

	public static final String JSON_PROPERTY_ACTIVE = "active";
	@Nullable
	private Boolean active;

	public static final String JSON_PROPERTY_PUBLISHED = "published";
	@Nullable
	private Boolean published;

	public static final String JSON_PROPERTY_DNSKEY = "dnskey";
	@Nullable
	private String dnskey;

	public static final String JSON_PROPERTY_DS = "ds";
	@Nullable
	private List<String> ds = new ArrayList<>();

	public static final String JSON_PROPERTY_CDS = "cds";
	@Nullable
	private List<String> cds = new ArrayList<>();

	public static final String JSON_PROPERTY_PRIVATEKEY = "privatekey";
	@Nullable
	private String privatekey;

	public static final String JSON_PROPERTY_ALGORITHM = "algorithm";
	@Nullable
	private String algorithm;

	public static final String JSON_PROPERTY_BITS = "bits";
	@Nullable
	private Integer bits;

	public Cryptokey() {
	}

	public Cryptokey type(@Nullable final String type) {

		this.type = type;
		return this;
	}

	/**
	 * set to \&quot;Cryptokey\&quot;
	 *
	 * @return type
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_TYPE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public String getType() {
		return type;
	}

	@JsonProperty(JSON_PROPERTY_TYPE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setType(@Nullable final String type) {
		this.type = type;
	}

	public Cryptokey id(@Nullable final Integer id) {

		this.id = id;
		return this;
	}

	/**
	 * The internal identifier, read only
	 *
	 * @return id
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_ID)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public Integer getId() {
		return id;
	}

	@JsonProperty(JSON_PROPERTY_ID)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setId(@Nullable final Integer id) {
		this.id = id;
	}

	public Cryptokey keytype(@Nullable final KeytypeEnum keytype) {

		this.keytype = keytype;
		return this;
	}

	/**
	 * Get keytype
	 *
	 * @return keytype
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_KEYTYPE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public KeytypeEnum getKeytype() {
		return keytype;
	}

	@JsonProperty(JSON_PROPERTY_KEYTYPE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setKeytype(@Nullable final KeytypeEnum keytype) {
		this.keytype = keytype;
	}

	public Cryptokey active(@Nullable final Boolean active) {

		this.active = active;
		return this;
	}

	/**
	 * Whether or not the key is in active use
	 *
	 * @return active
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_ACTIVE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public Boolean getActive() {
		return active;
	}

	@JsonProperty(JSON_PROPERTY_ACTIVE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setActive(@Nullable final Boolean active) {
		this.active = active;
	}

	public Cryptokey published(@Nullable final Boolean published) {

		this.published = published;
		return this;
	}

	/**
	 * Whether or not the DNSKEY record is published in the zone
	 *
	 * @return published
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_PUBLISHED)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public Boolean getPublished() {
		return published;
	}

	@JsonProperty(JSON_PROPERTY_PUBLISHED)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setPublished(@Nullable final Boolean published) {
		this.published = published;
	}

	public Cryptokey dnskey(@Nullable final String dnskey) {

		this.dnskey = dnskey;
		return this;
	}

	/**
	 * The DNSKEY record for this key
	 *
	 * @return dnskey
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_DNSKEY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public String getDnskey() {
		return dnskey;
	}

	@JsonProperty(JSON_PROPERTY_DNSKEY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setDnskey(@Nullable final String dnskey) {
		this.dnskey = dnskey;
	}

	public Cryptokey ds(@Nullable final List<String> ds) {

		this.ds = ds;
		return this;
	}

	public Cryptokey addDsItem(final String dsItem) {
		if (this.ds == null) {
			this.ds = new ArrayList<>();
		}
		this.ds.add(dsItem);
		return this;
	}

	/**
	 * An array of DS records for this key
	 *
	 * @return ds
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_DS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public List<String> getDs() {
		return ds;
	}

	@JsonProperty(JSON_PROPERTY_DS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setDs(@Nullable final List<String> ds) {
		this.ds = ds;
	}

	public Cryptokey cds(@Nullable final List<String> cds) {

		this.cds = cds;
		return this;
	}

	public Cryptokey addCdsItem(final String cdsItem) {
		if (this.cds == null) {
			this.cds = new ArrayList<>();
		}
		this.cds.add(cdsItem);
		return this;
	}

	/**
	 * An array of DS records for this key, filtered by CDS publication settings
	 *
	 * @return cds
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_CDS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public List<String> getCds() {
		return cds;
	}

	@JsonProperty(JSON_PROPERTY_CDS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setCds(@Nullable final List<String> cds) {
		this.cds = cds;
	}

	public Cryptokey privatekey(@Nullable final String privatekey) {

		this.privatekey = privatekey;
		return this;
	}

	/**
	 * The private key in ISC format
	 *
	 * @return privatekey
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_PRIVATEKEY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public String getPrivatekey() {
		return privatekey;
	}

	@JsonProperty(JSON_PROPERTY_PRIVATEKEY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setPrivatekey(@Nullable final String privatekey) {
		this.privatekey = privatekey;
	}

	public Cryptokey algorithm(@Nullable final String algorithm) {

		this.algorithm = algorithm;
		return this;
	}

	/**
	 * The name of the algorithm of the key, should be a mnemonic
	 *
	 * @return algorithm
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_ALGORITHM)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public String getAlgorithm() {
		return algorithm;
	}

	@JsonProperty(JSON_PROPERTY_ALGORITHM)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setAlgorithm(@Nullable final String algorithm) {
		this.algorithm = algorithm;
	}

	public Cryptokey bits(@Nullable final Integer bits) {

		this.bits = bits;
		return this;
	}

	/**
	 * The size of the key
	 *
	 * @return bits
	 */
	@Nullable
	@JsonProperty(JSON_PROPERTY_BITS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

	public Integer getBits() {
		return bits;
	}

	@JsonProperty(JSON_PROPERTY_BITS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public void setBits(@Nullable final Integer bits) {
		this.bits = bits;
	}

	@Override
	public boolean equals(final Object o) {
		if (this == o) {
			return true;
		}
		if ((o == null) || (getClass() != o.getClass())) {
			return false;
		}
		Cryptokey cryptokey = (Cryptokey) o;
		return Objects.equals(this.type, cryptokey.type) &&
				Objects.equals(this.id, cryptokey.id) &&
				Objects.equals(this.keytype, cryptokey.keytype) &&
				Objects.equals(this.active, cryptokey.active) &&
				Objects.equals(this.published, cryptokey.published) &&
				Objects.equals(this.dnskey, cryptokey.dnskey) &&
				Objects.equals(this.ds, cryptokey.ds) &&
				Objects.equals(this.cds, cryptokey.cds) &&
				Objects.equals(this.privatekey, cryptokey.privatekey) &&
				Objects.equals(this.algorithm, cryptokey.algorithm) &&
				Objects.equals(this.bits, cryptokey.bits);
	}

	@Override
	public int hashCode() {
		return Objects.hash(type, id, keytype, active, published, dnskey, ds, cds, privatekey, algorithm, bits);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Cryptokey {\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    keytype: ").append(toIndentedString(keytype)).append("\n");
		sb.append("    active: ").append(toIndentedString(active)).append("\n");
		sb.append("    published: ").append(toIndentedString(published)).append("\n");
		sb.append("    dnskey: ").append(toIndentedString(dnskey)).append("\n");
		sb.append("    ds: ").append(toIndentedString(ds)).append("\n");
		sb.append("    cds: ").append(toIndentedString(cds)).append("\n");
		sb.append("    privatekey: ").append(toIndentedString(privatekey)).append("\n");
		sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
		sb.append("    bits: ").append(toIndentedString(bits)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(final Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
